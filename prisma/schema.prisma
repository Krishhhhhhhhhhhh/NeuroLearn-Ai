generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Mock Interview Feature
model MockInterview {
  id            Int          @id @default(autoincrement())
  jsonMockResp  String       @db.Text
  jobPosition   String       @db.VarChar(255)
  jobDesc       String       @db.VarChar(255)
  jobExperience String       @db.VarChar(255)
  createdBy     String       @db.VarChar(255)
  createdAt     String?      @db.VarChar(255)
  mockId        String       @unique @db.VarChar(255)
  userAnswers   UserAnswer[]

  @@map("mockInterview")
}

model UserAnswer {
  id           Int          @id @default(autoincrement())
  mockIdRef    String       @db.VarChar(255)
  question     String       @db.VarChar(255)
  correctAns   String?      @db.Text
  userAns      String?      @db.Text
  feedback     String?      @db.Text
  rating       String?      @db.VarChar(255)
  userEmail    String?      @db.VarChar(255)
  createdAt    String?      @db.VarChar(255)
  mockInterview MockInterview @relation(fields: [mockIdRef], references: [mockId])

  @@map("userAnswer")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  walletAddress String?   @unique
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  histories     History[]
  badges        Badge[]
  createdAt     DateTime  @default(now())
}
model Badge {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  awardedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  moduleId    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id         String   @id @default(cuid())
  youtubeId  String   @unique
  title      String
  description String?
  thumbnail  String?
  duration   String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
  histories  History[]
}

model History {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String
  watchTime Int?     // seconds watched
  completed Boolean  @default(false)
  viewedAt  DateTime @default(now())
}